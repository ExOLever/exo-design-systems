@import '../../theming/abstracts/variables';
@import '../../theming/themes/colors';

@mixin draw-certificates($current-certifications, $sizeCircumference) {
  $init-degree: 5;
  @for $i from 0 through $current-certifications {
    &.certificate-#{$i}{
      @warn "Valor de i #{$i}";
      @if($i == 0) {
        @warn 'iiii';
        circle {
          transform: rotate(($init-degree) * 1deg);

        }
      } @else {
        @warn 'else';
        svg {
          margin-top: -$sizeCircumference * $i;
        }

        circle {
          $degree: ($i / $current-certifications) * 360;
          transform: rotate(($degree + $init-degree) * 1deg);
        }
      }
    }
  }
}

@mixin avatar-certificate($sizeCircumference) {
  width: $sizeCircumference;
  height: $sizeCircumference;
  circle {
    stroke-linecap: round;
  }
  .T circle, .I circle { // For Trainer, Align Trainer
    stroke: map_get($exo-teal, A400);
  }
  .K circle { // For Ambassador
    stroke: map_get($exo-amber, 700);
  }
  .X circle { // For Coach
    stroke: map_get($exo-blue, A700);
  }
  $max-certifications: 4; // Until now only 4 certifications are allowed
  @for $i from 0 through $max-certifications {
    &.number-certificates-#{$i} {
      @include draw-certificates($i, $sizeCircumference);
    }
  }
}

@mixin _exo-avatar {
  .avatar__figure {
    display: flex;
    flex-direction: column;
    justify-content: center;
    vertical-align: baseline;
    border: 0 none;
    outline: 0;
    margin: 0;
  }

  .exo-image {
    // TODO: Change to '0.5x' without calc when typography branch be merged.
    &-xs {
      width: calc(0.5 * #{map-get($componentMeasure, '1x')});
      height: calc(0.5 * #{map-get($componentMeasure, '1x')});
    }
    &-sm {
      width: #{map-get($componentMeasure, '1x')};
      height: #{map-get($componentMeasure, '1x')};
    }
    &-lg {
      width: calc(2 * #{map-get($componentMeasure, '1x')});
      height: calc(2 * #{map-get($componentMeasure, '1x')});
    }
    &-xl {
      width: calc(3 * #{map-get($componentMeasure, '1x')});
      height: calc(3 * #{map-get($componentMeasure, '1x')});
    }
    &-shape-circle {
      -webkit-border-radius: 50%;
      -moz-border-radius: 50%;
      border-radius: 50%;
      flex-shrink: 0;
    }
  }

  .certificates {
    .medium-avatar {
      @include avatar-certificate(56px)
    }

    .big-avatar {
      @include avatar-certificate(108px)
    }

  }

  .icon {
    opacity: .64;
    &-size-xs {
      font-size: calc(0.5 * #{map-get($componentMeasure, '1x')});
    }
    &-size-sm {
      font-size: #{map-get($componentMeasure, '1x')};
    }
    &-size-lg {
      font-size: calc(2 * #{map-get($componentMeasure, '1x')});
    }
    &-size-xl {
      font-size: calc(3 * #{map-get($componentMeasure, '1x')});
    }
  }
}
